{"version":3,"sources":["components/tsx/Header.tsx","components/tsx/TabsSelect.tsx","components/hooks/getAsyncPosts.ts","components/hooks/useGetPost.ts","components/tsx/NewsLists.tsx","components/tsx/Main.tsx","index.tsx"],"names":["Header","AppBar","position","Toolbar","sx","display","xs","md","mr","Typography","variant","noWrap","component","href","fontFamily","fontWeight","letterSpacing","color","textDecoration","TabsSelect","selectTab","setSelectTab","tabsCategories","Tabs","value","onChange","event","newTab","width","borderBottom","Object","keys","map","key","Tab","label","URL_HEAD","createPosts","category","a","fetch","json","r","pickupPosts","posts","getPosts","postIds","newsCount","post","getPostData","push","Promise","all","items","isNotNull","item","filter","id","url","window","response","postData","console","error","NewsLists","isLoading","postDatas","Grid","container","alignItems","justifyContent","direction","pt","CircularProgress","Box","mt","Card","CardContent","title","mb","by","CardActions","Button","target","size","Main","useState","setIsLoading","setCategory","setPosts","useEffect","catch","message","categories","top","new","best","textCategory","useGetPosts","m","maxWidth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.476f04a2.chunk.js","sourcesContent":["import React from 'react'\nimport AppBar from '@mui/material/AppBar'\nimport Toolbar from '@mui/material/Toolbar'\nimport Typography from '@mui/material/Typography'\nimport NewspaperIcon from '@mui/icons-material/Newspaper';\nimport { Grid } from '@mui/material';\n\nconst Header: React.FC = () => {\n  return (\n    <AppBar position='static'>\n      <Toolbar>\n        <NewspaperIcon sx={{ display: { xs: 'none', md: 'flex' }, mr: 1 }} />\n        <Typography\n          variant=\"h6\"\n          noWrap\n          component=\"a\"\n          href=\"/\"\n          sx={{\n            mr: 2,\n            display: { xs: 'none', md: 'flex' },\n            fontFamily: 'monospace',\n            fontWeight: 700,\n            letterSpacing: '.3rem',\n            color: 'inherit',\n            textDecoration: 'none',\n          }}\n        >\n          NewsSite\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default Header","import React from 'react'\nimport Tabs from '@mui/material/Tabs'\nimport Tab from '@mui/material/Tab'\nimport { Category } from '../hooks/interface'\n\ninterface TabProps {\n  selectTab: string\n  setSelectTab: React.Dispatch<React.SetStateAction<string>>\n  tabsCategories: Category\n}\n\nconst TabsSelect: React.FC<TabProps> = ({ selectTab, setSelectTab, tabsCategories }) => {\n  const clickTab = (event: React.SyntheticEvent, newTab: string): void => {\n    setSelectTab(newTab)\n  }\n\n  return (\n    <Tabs value={selectTab} onChange={clickTab} variant='fullWidth' sx={{\n      width: '100%',\n      borderBottom: '1px solid black'\n    }}>\n      {\n        Object.keys(tabsCategories).map(key => {\n          return (\n            <Tab key={key} label={tabsCategories[key]} value={key} />\n          )\n        })\n      }\n    </Tabs>\n  )\n}\n\nexport default TabsSelect\n","import { PostItem } from './interface'\nconst URL_HEAD = 'https://hacker-news.firebaseio.com/v0'\n\n// 非同期処理に使う関数群\n\n// URLから数値としてデータを持ってきて、pickupPostsに通した結果を返す。\nexport const createPosts = async (category: string): Promise<PostItem[]> => {\n  const r: number[] = await (await fetch(`${URL_HEAD}/${category}stories.json`)).json()\n  const posts = await pickupPosts(r)\n  return posts\n}\n\nconst limitPosts = 20\n// 記事のデータを作成し返却\nasync function pickupPosts(getPosts: number[]): Promise<PostItem[]> {\n  const postIds = getPosts\n  if (postIds == null) return []\n\n  const posts = []\n  let newsCount = 0\n\n  while (newsCount < limitPosts) {\n    const post = getPostData(postIds[newsCount])\n    posts.push(post)\n    newsCount++\n  }\n\n  const items = await Promise.all(posts)\n  const isNotNull = <T>(item: T | null): item is T => item != null\n  return items.filter(isNotNull)\n}\n\n// 受け取った数値を歯抜けのurlと組み合わせて記事を特定し、そのデータを返す。\nasync function getPostData(id: number): Promise<PostItem | null> {\n  try {\n    const url = `${URL_HEAD}/item/${id}.json`\n    const response = await window.fetch(url)\n    const postData: PostItem = await response.json()\n    return postData\n  } catch (e) {\n    console.error(e)\n    return null\n  }\n}","import { useState, useEffect } from 'react'\nimport { Category, PostItem } from './interface'\nimport { createPosts } from './getAsyncPosts'\n\n// Appに必要な情報をまとめて渡す。非同期処理のための副作用フックも含んでいる。\n\ninterface getPostsProps {\n  isLoading: boolean\n  textCategory: string\n  categories: Category\n  postDatas: PostItem[]\n  setCategory: React.Dispatch<React.SetStateAction<string>>\n}\n\nexport const useGetPosts = (): getPostsProps => {\n\n  // ローディング状態切り替え\n  const [isLoading, setIsLoading] = useState(true)\n\n  // ニュースのカテゴリ。TabsSelectのクリックによって切り替わる。\n  const [category, setCategory] = useState('top')\n\n  // 取得してきた記事が格納される。カテゴリの切り替えと同時に切り替わる。\n  const postDataKey: PostItem[] = []\n  const [postDatas, setPosts] = useState(postDataKey)\n\n  const loadPosts = () => {\n    const fetch = async (): Promise<void> => {\n      setIsLoading(true)\n      const response = await createPosts(category)\n      setPosts(response)\n      setIsLoading(false)\n    }\n\n    fetch()\n      .catch((error: Error) => {\n        console.error(error.message)\n      })\n  }\n\n  useEffect(loadPosts, [category])\n\n  const categories: Category = {\n    top: 'top',\n    new: 'new',\n    best: 'best'\n  }\n\n  var textCategory = categories[category]\n  return { isLoading, textCategory, categories, postDatas, setCategory }\n}\n","import React from 'react'\nimport Box from '@mui/material/Box'\nimport Grid from '@mui/material/Grid'\nimport CircularProgress from '@mui/material/CircularProgress'\nimport Card from '@mui/material/Card'\nimport CardActions from '@mui/material/CardActions'\nimport CardContent from '@mui/material/CardContent'\nimport Typography from '@mui/material/Typography'\nimport Button from '@mui/material/Button'\nimport { PostItem } from '../hooks/interface'\n\n\ninterface PostsProps {\n  isLoading: boolean\n  postDatas: PostItem[]\n}\n\nconst NewsLists: React.FC<PostsProps> = ({ isLoading, postDatas }: PostsProps) => {\n\n  if (isLoading) {\n    return (\n      <Grid container alignItems='center' justifyContent='center' direction='column'>\n        <Grid item xs={12} pt={10}>\n          <CircularProgress color=\"secondary\" />\n        </Grid>\n      </Grid>\n    )\n  } else {\n    return (\n      <>\n        {postDatas.map((post) => {\n          return (\n            <Box key={post.id} mt={3} width={'100%'}>\n              <Card>\n                <CardContent>\n                  <Typography variant='h5' component='div'>\n                    {post.title}\n                  </Typography>\n                  <Typography mb={1.5} color='text.secondary'>\n                    by: {post.by}\n                  </Typography>\n                </CardContent>\n                <CardActions>\n                  <Button href={post.url} target='_blank' size='small'>詳細</Button>\n                </CardActions>\n              </Card>\n            </Box>\n          )\n        })}\n      </>\n    )\n  }\n}\n\nexport default NewsLists\n","import React, { useState } from 'react'\nimport Box from '@mui/material/Box'\nimport TabsSelect from './TabsSelect'\nimport { useGetPosts } from '../hooks/useGetPost'\nimport NewsLists from './NewsLists'\n\nconst Main: React.FC = () => {\n  const { textCategory, categories, postDatas, isLoading, setCategory } = useGetPosts()\n  return (\n    <Box pt={5} m={'0 auto'} width={'100%'} maxWidth={800}>\n      <TabsSelect selectTab={textCategory} setSelectTab={setCategory} tabsCategories={categories} />\n      <NewsLists isLoading={isLoading} postDatas={postDatas} />\n    </Box>\n  )\n}\n\nexport default Main\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport Header from \"./components/tsx/Header\";\nimport Main from \"./components/tsx/Main\";\nimport \"./index.css\";\n\nReactDOM.render(\n    <>\n        <Header />\n        <Main />\n    </>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}